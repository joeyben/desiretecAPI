<?php

use App\Helpers\uuid;
use App\Models\Notification\Notification;
use App\Models\Settings\Setting;
use Carbon\Carbon as Carbon;

/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return uuid::uuid4();
}

if (!function_exists('homeRoute')) {
    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (!function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (!function_exists('includeRouteFiles')) {
    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ('.' !== $filename && '..' !== $filename && is_dir($directory . $filename)) {
                array_push($directory_list, $directory . $filename . '/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory . '*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {
    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path) . '/' . $filename . '.rtl.css';
    }
}

if (!function_exists('settings')) {
    /**
     * Access the settings helper.
     */
    function settings()
    {
        // Settings Details
        $settings = Setting::latest()->first();
        if (!empty($settings)) {
            return $settings;
        }
    }
}

if (!function_exists('createNotification')) {
    /**
     * create new notification.
     *
     * @param          $message message you want to show in notification
     * @param          $userId  To Whom You Want To send Notification
     * @param int|null $fromId
     *
     * @return object
     */
    function createNotification($message, $userId, int $fromId = null)
    {
        $notification = new Notification();

        return $notification->insert([
            'message'    => $message,
            'user_id'    => $userId,
            'from_id'    => $fromId,
            'type'       => 1,
            'created_at' => Carbon::now(),
        ]);
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}

if (!function_exists('getMenuItems')) {
    /**
     * Converts items (json string) to array and return array.
     */
    function getMenuItems($type = 'backend', $id = null)
    {
        $menu = new \App\Models\Menu\Menu();
        $menu = $menu->where('type', $type);
        if (!empty($id)) {
            $menu = $menu->where('id', $id);
        }
        $menu = $menu->first();
        if (!empty($menu) && !empty($menu->items)) {
            return json_decode($menu->items);
        }

        return [];
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';
        if (!empty($url)) {
            if ('route' === $url_type) {
                if (false !== mb_strpos($url, $separator)) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    $routeUrl = route($url);
                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (!empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item'));
                }
            } else {
                echo view($viewName, compact('item'));
            }
        }
    }
}

if (!function_exists('isActiveMenuItem')) {
    /**
     * checks if current URL is of current menu/sub-menu.
     */
    function isActiveMenuItem($item, $separator = '?')
    {
        $item->clean_url = $item->url;
        if (false !== mb_strpos($item->url, $separator)) {
            $item->clean_url = explode($separator, $item->url, -1);
        }
        if (Active::checkRoutePattern($item->clean_url)) {
            return true;
        }
        if (!empty($item->children)) {
            foreach ($item->children as $child) {
                $child->clean_url = $child->url;
                if (false !== mb_strpos($child->url, $separator)) {
                    $child->clean_url = explode($separator, $child->url, -1);
                }
                if (Active::checkRoutePattern($child->clean_url)) {
                    return true;
                }
            }
        }

        return false;
    }
}

if (!function_exists('checkDatabaseConnection')) {
    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}

if (!function_exists('transformTravelers')) {
    /**
     * manipulate adults string.
     *
     * @param string $travelers
     * @param string $type
     *
     * @return string
     */
    function transformTravelers($travelers, $type)
    {
        return $travelers . ' ' . trans_choice('labels.frontend.wishes.table.' . $type, (int) $travelers);
    }
}

if (!function_exists('transformDuration')) {
    /**
     * manipulate duration string.
     *
     * @param string $duration
     *
     * @return string
     */
    function transformDuration($duration)
    {
        switch ($duration) {
            case '7':
                return trans_choice('labels.frontend.wishes.week', 1, ['value' => 1]);

                break;

            case '14':
                return trans_choice('labels.frontend.wishes.week', 2, ['value' => 2]);
                break;

            case '21':
                return trans_choice('labels.frontend.wishes.week', 3, ['value' => 3]);
                break;

            case '28':
                return trans_choice('labels.frontend.wishes.week', 4, ['value' => 4]);
                break;

            case null:
                return 'beliebig';
                break;

            default:
                return trans_choice('labels.frontend.wishes.night', (int) $duration, ['value' => (int) $duration]);
                break;
        }
    }
}

if (!function_exists('isWhiteLabel')) {
    /**
     * Set current whitelabel Id.
     * @return boolean
     */
    function isWhiteLabel()
    {
        return session('current_whitelabel');
    }
}

if (!function_exists('setCurrentWhiteLabelId')) {
    /**
     * Set current whitelabel Id.
     * @param int $id
     */
    function setCurrentWhiteLabelId($id)
    {
        session(['current_whitelabel' => $id]);
    }
}

if (!function_exists('getCurrentWhiteLabelId')) {
    /**
     * return current whitelabel Id.
     *
     * @return int
     */
    function getCurrentWhiteLabelId()
    {
        return session('current_whitelabel');
    }
}

if (!function_exists('getWhiteLabelLogo')) {
    /**
     * return current whitelabel logo url.
     *
     * @return string
     */
    function getWhiteLabelLogoUrl($id)
    {
        return \Modules\Attachments\Entities\Attachment::select([
        config('module.attachments.table') . '.basename',
        config('module.attachments.table') . '.type',
        ])
        ->where('attachable_id', $id)
        ->where('type', 'whitelabels/logo')
        ->first()->toArray()['url'];
    }
}