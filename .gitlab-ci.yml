stages:
  - build
  - test
  - deploy_pre_prod
  - deploy_prod


#build:
#  stage: build
#  services:
#    - docker:dind
#  script:
#    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
#    - docker build --build-arg APP_KEY=${APP_KEY_PROD} --build-arg AWS_KEY=${AWS_ACCESS_KEY} --build-arg --cache-from ${CONTAINER_IMAGE_LATEST} -f .docker/laravel/Dockerfile -t ${CONTAINER_IMAGE} -t ${CONTAINER_IMAGE_LATEST} .
#    - docker push ${CONTAINER_IMAGE}
#  only:
#    - master
#  variables:
#    CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}/app
#    CONTAINER_IMAGE_LATEST: ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}/app:latest
#
#build_echo_server:
#  stage: build
#  services:
#    - docker:dind
#  script:
#    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
#    - docker build --cache-from ${ECHO_CONTAINER_IMAGE_LATEST} -f .docker/laravel-echo-server/Dockerfile -t ${ECHO_CONTAINER_IMAGE} -t ${ECHO_CONTAINER_IMAGE_LATEST} .docker/laravel-echo-server/
#    - docker push ${ECHO_CONTAINER_IMAGE}
#  only:
#    - master
#  variables:
#    ECHO_CONTAINER_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}/echo
#    ECHO_CONTAINER_IMAGE_LATEST: ${CI_REGISTRY}/${CI_PROJECT_PATH}/${CI_COMMIT_REF_NAME}/echo:latest
#
#deploy_pre_prod:
#  stage: deploy_pre_prod
#  image: pstauffer/curl
#  script:
#    - RESP=$(curl -X POST ${SERVICE_WEBHOOK})
#    - if echo $RESP | grep -q ‘err’; then exit 1; fi
#    - RESP=$(curl -X POST ${ECHO_SERVICE_WEBHOOK})
#    - if echo $RESP | grep -q ‘err’; then exit 1; fi
#  only:
#    - master
#  variables:
#    SERVICE_WEBHOOK: ${PRE_PRODUCTION_SERVICE_HOOK}
#    ECHO_SERVICE_WEBHOOK: ${PRE_PRODUCTION_ECHO_SERVICE_HOOK}

build-master:
  stage: deploy_prod
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --update py-pip gcc musl-dev python-dev libffi-dev openssl-dev make
    - pip install docker-compose
  script:
    - mkdir $DOCKER_CERT_PATH
    - echo "$MACHINE_CA" > $DOCKER_CERT_PATH/ca.pem
    - echo "$CLIENT_CERT" > $DOCKER_CERT_PATH/cert.pem
    - echo "$CLIENT_KEY" > $DOCKER_CERT_PATH/key.pem
    - echo "$PROD_DOTENV" > .env
    - docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
    - docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
    - docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
    - rm -rf $DOCKER_CERT_PATH
  only:
    - master
  when: manual
  variables:
    DOCKER_TLS_VERIFY: "1"
    DOCKER_HOST: "tcp://mvpprod.desiretec.com:2376"
    DOCKER_CERT_PATH: "certs"
    CLIENT_CERT: $PRD_CLIENT_DOCKER_CERT
    MACHINE_CA: $PRD_DOCKER_MACHINE_CA
    CLIENT_KEY: $PRD_CLIENT_DOCKER_CERT_KEY
    PROD_DOTENV: $PROD_ENV
    DB_ROOT_PW: $MARIADB_ROOT_PW
    DB_STAGE_PW: $MARIADB_PROD_PW

build-stage:
  stage: build
  image: horrorhorst/docker-compose:latest
  services:
    - docker:dind
  script:
    - mkdir $DOCKER_CERT_PATH
    - echo "$MACHINE_CA" > $DOCKER_CERT_PATH/ca.pem
    - echo "$CLIENT_CERT" > $DOCKER_CERT_PATH/cert.pem
    - echo "$CLIENT_KEY" > $DOCKER_CERT_PATH/key.pem
    - docker-compose -f docker-compose.yml -f docker-compose.stage.yml build
    - docker-compose -f docker-compose.yml -f docker-compose.stage.yml down
    - docker-compose -f docker-compose.yml -f docker-compose.stage.yml up -d
    - docker image prune -a --force --filter "until=12h" --filter "label=maintainer=desiretec"
    - rm -rf $DOCKER_CERT_PATH
  only:
    - development
  variables:
    DOCKER_TLS_VERIFY: "1"
    DOCKER_HOST: "tcp://mvp.desiretec.com:2376"
    DOCKER_CERT_PATH: "certs"
    CLIENT_CERT: $CLIENT_DOCKER_CERT
    MACHINE_CA: $DOCKER_MACHINE_CA
    CLIENT_KEY: $CLIENT_DOCKER_CERT_KEY
    DB_ROOT_PW: $MARIADB_ROOT_PW
    DB_STAGE_PW: $MARIADB_STAGE_PW
